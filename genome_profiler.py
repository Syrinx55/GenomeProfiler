import argparse
from configparser import ConfigParser
from multiprocessing import cpu_count
import gui_frontend
import sys


def create_argument_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        prog="GenomeProfiler",
        description="A tool to automate genome feature profiling and visualization.",
        epilog="""
Available Tools (use with --include-tools):
  abricate       - Run abricate for resistance gene profiling.
  isescan        - Run ISEScan to identify insertion sequences.
  mobileog       - Run MobileOG-db analysis.
  ectyper        - Run ECTyper for serotyping.
  tncentral      - Run BLASTn search against TnCentral.
  integron       - Run Integron Finder.
  islandviewer   - Submit genome to IslandViewer for island prediction.
  plsdb          - Use PLSDB for plasmid similarity screening.
  phastest       - Run local PHASTEST search for phage regions.
  parser         - Parse tool outputs for visualization (enabled by default in GUI).

Examples:
  python cli_main.py NZ_CP000000
  python cli_main.py NZ_CP000000 --include-tools abricate parser --timestamped-output
  python cli_main.py --help
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "accessions",
        nargs="*",
        help="NCBI accession(s) to process (optional if using --fasta or --genbank)",
    )
    parser.add_argument(
        "--setup",
        action="store_true",
        help="Download resources required by tools, such as databases. NOTE: Run using this once before using other options.",
    )
    parser.add_argument(
        "-g",
        "--gui",
        action="store_true",
        help="Run GenomeProfiler in graphical mode. NOTE: This will ignore all other arguments.",
    )
    parser.add_argument(
        "-t",
        "--include",
        nargs="*",
        default=[],
        help="Run these tools on the accessions.",
    )
    parser.add_argument(
        "-a",
        "--all-tools",
        action="store_true",
        help="Run all available tools on the accessions.",
    )
    parser.add_argument(
        "--exclude",
        nargs="*",
        default=[],
        help="Do not run these tools on the accessions. NOTE: If a tool is included and excluded, it will not be included.",
    )
    parser.add_argument(
        "--fasta",
        help="Optional local FASTA file to use instead of fetching from NCBI",
    )
    parser.add_argument(
        "--genbank",
        help="Optional local GenBank file to use instead of fetching from NCBI",
    )
    parser.add_argument(
        "--workers",
        type=int,
        default=int(cpu_count() / 2),
        help=f"Number of concurrent workers (default: {int(cpu_count() / 2)}, half of CPU count)",
    )
    parser.add_argument(
        "--output-dir",
        help="Base directory to store results (overrides: output_base in config; default: output_GenomeProfiler)",
    )
    parser.add_argument(
        "--resources-dir",
        nargs=1,
        default="resources_GenomeProfiler",
        help="Path to resources directory generated by --setup (default: resources_GenomeProfiler)",
    )
    parser.add_argument(
        "--config-dir",
        nargs=1,
        default="config_GenomeProfiler.ini",
        help="Path to configuration file generated by --setup (default: config_GenomeProfiler.ini)",
    )
    parser.add_argument(
        "-n",
        "--no-interact",
        action="store_true",
        help="Terminate instead of prompting for input. NOTE: Useful for scripts.",
    )

    return parser


def open_gui():
    gui_frontend.main()
    sys.exit(0)


def load_and_resolve_config_file(
    path="GenomeProfiler/config.ini",
    section="brig_settings",
    overrides={},
) -> Union[None, Section]:
    DEFAULT_ENTRIES = {
        "islandviewer_api_submit": "https://www.pathogenomics.sfu.ca/islandviewer/http_api/rest/submit/",
        "islandviewer_api_status": "https://www.pathogenomics.sfu.ca/islandviewer/rest/job/{token}/",
        "islandviewer_api_download": "https://www.pathogenomics.sfu.ca/islandviewer/rest/job/{token}/download/tab/",
        "abricate_path": "abricate",
        "integron_path": "integron_finder",
        "isescan_path": "isescan.py",
        "ectyper_path": "ectyper",
        "prodigal_path": "prodigal",
        "diamond_path": "diamond",
        "plsdb_meta_dir": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2",
        "plsdb_sketch_path": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/plsdb_sketch.msh",
        "assembly_csv": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/assembly.csv",
        "nuccore_csv": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/nuccore.csv",
        "plasmidfinder.csv": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/plasmidfinder.csv",
        "typing.csv": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/typing.csv",
        "taxonomy.csv": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/taxonomy.csv",
        "biosample.csv": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/biosample.csv",
        "changes.tsv": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/changes.tsv",
        "amr.tsv": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/amr.tsv",
        "plsdb_mashdb_sim.tsv": "GenomeProfiler/cache/plsdb-meta-2024_05_31_v2/plsdb_mashdb_sim.tsv",
        "mobileog_db_faa": "GenomeProfiler/cache/mobileOG-db-beatrix-1.6/mobileOG-db_beatrix-1.6.All.faa",
        "mobileog_db_csv": "GenomeProfiler/cache/mobileOG-db-beatrix-1.6/mobileOG-db-beatrix-1.6-All.csv",
        "tncentral_db": "GenomeProfiler/cache/tncentral-db",
        "tncentral_fasta": "GenomeProfiler/cache/tncentral-db/tncentral_integrall_isfinder.fa",
        "phastest_db": "GenomeProfiler/cache/phastest/prophage_virus.db",
        "output_base": "output_GenomeProfiler",
        "max_workers": "4",
        "sleep_interval": "300",
        "ectyper_cores": "2",
    }

    parser = ConfigParser()
    if not parser.read(path) or not parser.has_section(section):
        return None

    for key in DEFAULT_ENTRIES:
        if not config.has_option(section, key):
            config.set(section, key, DEFAULT_ENTRIES[key])

    for key in overrides:
        config.set(section, key, overrides[key])

    return parser[section]


def validate_environment(config):
    checks = [
        ("abricate", [config["abricate_path"], "--version"]),
        ("integron_finder", [config["integron_path"], "--version"]),
        ("isescan", [config["isescan_path"], "--version"]),
        ("ectyper", [config["ectyper_path"], "--version"]),
        ("diamond", [config["diamond_path"], "version"]),
        ("prodigal", [config["prodigal_path"], "-v"]),
    ]

    missing = []
    for name, cmd in checks:
        try:
            subprocess.run(
                cmd, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
            )
        except (subprocess.CalledProcessError, FileNotFoundError):
            missing.append(name)

    if missing:
        raise EnvironmentError(f"Missing tools: {', '.join(missing)}")


def resolve_config_and_args():
    cli_parser = create_argument_parser()
    config_parser = None

    args = cli_parser.parse_args()

    if len(sys.argv) == 1:
        cli_parser.print_help()
        sys.exit(0)

    if args.gui:
        open_gui()


def main():
    resolve_config_and_args()
    validate_environment()


if __name__ == "__main__":
    main()
